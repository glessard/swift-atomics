//
//  CAtomicsTests.swift
//  AtomicsTests
//
//  Copyright Â© 2016-2017 Guillaume Lessard. All rights reserved.
//  This file is distributed under the BSD 3-clause license. See LICENSE for details.
//

import XCTest

import CAtomics
% integers = ['Int', 'UInt', 'Int8', 'UInt8', 'Int16', 'UInt16', 'Int32', 'UInt32', 'Int64', 'UInt64']

public class CAtomicsBasicTests: XCTestCase
{
% for i in integers:
  public func test${i}()
  {
    var i = Atomic${i}()
    i.initialize(0)
    XCTAssertEqual(0, i.load(.relaxed))
    XCTAssert(i.isLockFree())

#if swift(>=4.0)
    let r1 = ${i}.randomPositive()
    let r2 = ${i}.randomPositive()
    let r3 = ${i}.randomPositive()
#else
% truncating = '' if (i == 'Int' or i == 'UInt' or i == 'Int64' or i == 'UInt64') else 'truncatingBitPattern: '
    let r1 = ${i}(${truncating}UInt.randomPositive())
    let r2 = ${i}(${truncating}UInt.randomPositive())
    let r3 = ${i}(${truncating}UInt.randomPositive())
#endif

    i.store(r1, .relaxed)
    XCTAssertEqual(r1, i.load(.relaxed))

    var j = i.swap(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, i.load(.relaxed))

    j = i.fetch_add(r1, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 &+ r2, i.load(.relaxed))

    j = i.fetch_sub(r2, .relaxed)
    XCTAssertEqual(r1 &+ r2, j)
    XCTAssertEqual(r1, i.load(.relaxed))

    i.store(r1, .relaxed)
    j = i.fetch_or(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 | r2, i.load(.relaxed))

    i.store(r2, .relaxed)
    j = i.fetch_xor(r1, .relaxed)
    XCTAssertEqual(r2, j)
    XCTAssertEqual(r1 ^ r2, i.load(.relaxed))

    i.store(r1, .relaxed)
    j = i.fetch_and(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r1 & r2, i.load(.relaxed))

    j = r1
    i.store(r1, .relaxed)
    XCTAssertTrue(i.loadCAS(&j, r2, .strong, .relaxed, .relaxed))
    XCTAssertEqual(r2, i.load(.relaxed))

    j = r2
    i.store(r1, .relaxed)
    while(!i.loadCAS(&j, r3, .weak, .relaxed, .relaxed)) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, i.load(.relaxed))
  }

% end
  public func testBool()
  {
    var boolean = AtomicBool()
    boolean.initialize(false)
    XCTAssert(boolean.load(.relaxed) == false)
    XCTAssert(boolean.isLockFree())

    boolean.store(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)

    boolean.store(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)

    boolean.store(false, .relaxed)
    boolean.fetch_or(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)
    boolean.fetch_or(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)
    boolean.store(false, .relaxed)
    boolean.fetch_or(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)
    boolean.fetch_or(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)

    boolean.fetch_and(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)
    boolean.fetch_and(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)

    boolean.fetch_xor(false, .relaxed)
    XCTAssert(boolean.load(.relaxed) == false)
    boolean.fetch_xor(true, .relaxed)
    XCTAssert(boolean.load(.relaxed) == true)

    let old = boolean.swap(false, .relaxed)
    XCTAssert(old == true)
    XCTAssert(boolean.swap(true, .relaxed) == false)

    var current = true
    XCTAssert(boolean.load(.relaxed) == current)
    boolean.loadCAS(&current, false, .strong, .relaxed, .relaxed)
    current = boolean.load(.relaxed)
    XCTAssert(current == false)
    if boolean.loadCAS(&current, true, .strong, .relaxed, .relaxed)
    {
      current = !current
      XCTAssert(boolean.loadCAS(&current, false, .weak, .relaxed, .relaxed))
      current = !current
      XCTAssert(boolean.loadCAS(&current, true, .weak, .relaxed, .relaxed))
    }
  }
}

% pointers = ['AtomicOptionalRawPointer', 'AtomicNonNullRawPointer', 'AtomicNonNullMutableRawPointer', 'AtomicOptionalMutableRawPointer', 'AtomicPaddedMutableRawPointer', 'AtomicPaddedOptionalMutableRawPointer', 'AtomicPaddedRawPointer', 'AtomicPaddedOptionalRawPointer', 'AtomicNonNullOpaquePointer', 'AtomicOptionalOpaquePointer']
extension CAtomicsBasicTests
{
% for type in pointers:
  public func test${type}()
  {
% mutptr = 'Mutable' if 'Mutable' in type else ''
% prefix = 'Unsafe' + mutptr + 'Raw'
% native = prefix if 'RawPointer' in type else 'Opaque'
% bang = '' if ('Optional' in type) else '!'
    let r0 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r1 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r2 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}
    let r3 = ${native}Pointer(bitPattern: UInt.randomPositive())${bang}

    var p = ${type}(r3)
    XCTAssertEqual(r3, p.load(.relaxed))
    XCTAssert(p.isLockFree())

    p.initialize(r0)
    XCTAssertEqual(r0, p.load(.relaxed))

    p.store(r1, .relaxed)
    XCTAssertEqual(r1, p.load(.relaxed))

    var j = p.swap(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, p.load(.relaxed))

    XCTAssertTrue(p.CAS(r2, r3, .strong, .relaxed))
    XCTAssertEqual(r3, p.load(.relaxed))

    XCTAssertFalse(p.CAS(j, r2, .strong, .relaxed))
    XCTAssertTrue(p.CAS(r3, r2, .strong, .relaxed))
    j = p.load(.relaxed)
    XCTAssertTrue(p.CAS(r2, r1, .strong, .relaxed))
    while !p.loadCAS(&j, r3, .weak, .relaxed, .relaxed) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, p.load(.relaxed))
  }

% end
  public func testFence()
  {
    CAtomicsThreadFence(.release)
    CAtomicsThreadFence(.acquire)
  }
}
% optionality = ['', 'Optional']
% for optional in optionality:

protocol Tagged${optional}Pointer: Equatable
{
  associatedtype Pointer: Equatable
% if optional == 'Optional':
  var ptr: Optional<Pointer> { get }
% else:
  var ptr: Pointer { get }
% end
  var tag: Int { get }
}

extension Tagged${optional}Pointer
{
  static public func ==(lhs: Self, rhs: Self) -> Bool
  {
    return (lhs.ptr == rhs.ptr) && (lhs.tag == rhs.tag)
  }
}
% end

% mutability = ['', 'Mutable']
% for optional in optionality:
% for mutable in mutability:
% type = 'Tagged' + optional + mutable + 'RawPointer'
extension ${type}: Tagged${optional}Pointer {}
% end
% end

extension CAtomicsBasicTests
{
% for optional in optionality:
% for mutable in mutability:
% nativeType = 'Unsafe' + mutable + 'RawPointer'
% taggedType = 'Tagged' + optional + mutable + 'RawPointer'
  public func test${taggedType}()
  {
% bang = '!' if (optional is '') else ''
    let r0 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 2)
    var r1 = r0
    let r2 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 4)

    XCTAssertEqual(MemoryLayout<${taggedType}>.size, MemoryLayout<${nativeType}>.size*2)

    XCTAssertEqual(r0, r1)
    r1 = r0.incremented()
    XCTAssertNotEqual(r0, r1)
    XCTAssertEqual(r0.ptr, r1.ptr)
    XCTAssertEqual(r0.tag &+ 1, r1.tag)

    XCTAssertEqual(r1.tag, 3)
    r1 = r0.incremented(with: r2.ptr)
    XCTAssertEqual(r0.tag &+ 1, r1.tag)
    XCTAssertEqual(r1.ptr, r2.ptr)
    XCTAssertNotEqual(r1, r2)
    r1.increment()
    XCTAssertEqual(r1, r2)

    let r3 = r2.incremented()
    XCTAssertNotEqual(r2, r3)
    XCTAssertEqual(r2.ptr, r3.ptr)
    XCTAssertEqual(r2.tag, r3.tag &- 1)
    var r4 = r2
    r4.tag += 1
    XCTAssertEqual(r3, r4)
  }

% for aligned in ['', 'Padded']:
% atomicType = 'Atomic' + aligned + taggedType
  public func test${atomicType}()
  {
% bang = '!' if (optional is '') else ''
    let r0 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 0)
    let r1 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 1)
    let r2 = ${taggedType}(${nativeType}(bitPattern: UInt.randomPositive())${bang}, tag: 2)
    let r3 = r2.incremented()

    var p = ${atomicType}(r3)
    XCTAssertEqual(r3, p.load(.relaxed))
    XCTAssert(p.isLockFree())

    p.initialize(r0)
    XCTAssertEqual(r0, p.load(.relaxed))

    p.store(r1, .relaxed)
    XCTAssertEqual(r1, p.load(.relaxed))

    var j = p.swap(r2, .relaxed)
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r2, p.load(.relaxed))

    XCTAssertTrue(p.CAS(r2, r3, .strong, .relaxed))
    XCTAssertEqual(r3, p.load(.relaxed))

    XCTAssertFalse(p.CAS(j, r2, .strong, .relaxed))
    XCTAssertTrue(p.CAS(r3, r2, .strong, .relaxed))
    j = p.load(.relaxed)
    XCTAssertTrue(p.CAS(r2, r1, .strong, .relaxed))
    while !p.loadCAS(&j, r3, .weak, .relaxed, .relaxed) {}
    XCTAssertEqual(r1, j)
    XCTAssertEqual(r3, p.load(.relaxed))
  }

% end
% end
% end
  public func testPaddedPointers()
  {
    var p: UnsafeMutableRawPointer?
% for mutable in ['', 'Mutable']:
% variable = 'm' if mutable is 'Mutable' else 'c'

    p = UnsafeMutableRawPointer(bitPattern: UInt.randomPositive())
    let ${variable}1 = PaddedOptional${mutable}RawPointer(p)
    XCTAssertGreaterThan(MemoryLayout.size(ofValue: ${variable}1), MemoryLayout.size(ofValue: ${variable}1.pointer))
    XCTAssertEqual(MemoryLayout.alignment(ofValue: ${variable}1), MemoryLayout.alignment(ofValue: ${variable}1.pointer))
    XCTAssertGreaterThan(MemoryLayout.stride(ofValue: ${variable}1), MemoryLayout.stride(ofValue: ${variable}1.pointer))
    XCTAssertEqual(MemoryLayout.stride(ofValue: ${variable}1), 64)
    if let p1 = ${variable}1.pointer
    {
      let ${variable}2 = Padded${mutable}RawPointer(p1)
      XCTAssertGreaterThan(MemoryLayout.size(ofValue: ${variable}2), MemoryLayout.size(ofValue: ${variable}2.pointer))
      XCTAssertEqual(MemoryLayout.alignment(ofValue: ${variable}2), MemoryLayout.alignment(ofValue: ${variable}2.pointer))
      XCTAssertGreaterThan(MemoryLayout.stride(ofValue: ${variable}2), MemoryLayout.stride(ofValue: ${variable}2.pointer))
      XCTAssertEqual(MemoryLayout.stride(ofValue: ${variable}2), 64)
      let p2 = ${variable}2.pointer
      XCTAssert(p1 == p2)
      XCTAssert(Int(bitPattern: p2) == Int(bitPattern: p))
    }
% end
  }
}
